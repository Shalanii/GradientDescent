%initialize data pointsx = [75.243	163.14	138.06	47.189	88.801	61.841	193.29	57.067	76.878	41.822	92.402	59.799	91.404	35.659	79.766	19.261	88.677	167.07	13.613	42.586	188.06	184.98	53.954	164.36	73.448	84.199	36.122	154.78	32.892	46.117	118.33	54.195	24.793	58.424	179.65	18.176	184.94	149.22	82.704	77.113];	y = [76.341	170.27	134.72	42.177	87.895	70.702	186.38	62.205	78.03	38.584	95.724	69.366	89.437	26.961	81.765	13.809	96.273	175.86	34.079	40.854	191.91	187.62	40.103	168.53	66.715	96.461	37.77	157.38	52.555	49.564	114.69	40.838	29.415	68.483	185.34	34.268	178.83	144.21	84.07	63.185];																%define initial m and c values randomlyc_i = randi(10);m_i = randi(10);%optimal m value - ideal_m and optimal c value - ideal_cideal_m = m_i;ideal_c = c_i;%define learning rateeata = 0.0001;%define the size of mini batchbatch_size = 10;%size of the datasetN = size(x,2);%flag to stop the while loopstop = 0;#iteration countcount = 0;#arrays to store mini batch coordinatesx_batch = [];y_batch = [];while(stop==0)  count = count+1;  fprintf("count %d\n",count);    #generate the mini batch with random data points  for i=1:batch_size    n = randi(N);    x_batch(i)=x(n);    y_batch(i)=y(n);  endfor    der_c = find_derivative_of_rss_to_c(y_batch,x_batch,m_i,c_i,batch_size);  der_m = find_derivative_of_rss_to_m(y_batch,x_batch,m_i,c_i,batch_size);   fprintf("Step sizes %d %d\n",der_c,der_m);  %Stop criteria:   % if number of iterations>200, then the stip flag is set to true OR if the step size of either m or m (der_c or der_m) is less than 0.1, the stop condition is set to true.  if count>200 || (abs(der_c)<0.1 || (abs(der_m)<0.1 && count>2))    stop=1;    ideal_c = c_i;    ideal_m = m_i;  endif    c_i = c_i - (eata*der_c);  m_i = m_i - (eata*der_m);  c(end+1) = c_i;  m(end+1) = m_i;endfprintf("p2");%Z = find_rss_for_m_c(y,m,x,c,N);%fprintf("p1");%contour(m,c,Z);%plot real data points and predicted straight linefigure();plot(x,y,'x');hold onpredicted = (x.*ideal_m) + ideal_c;plot(x,predicted,'-');%display optimal m and c valuesfprintf("Optimal m is : %d\nOptimal c is : %d\n",ideal_m,ideal_c);