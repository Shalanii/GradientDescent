x = [27.6252   -0.8369   -3.0496   55.6353    7.6559    6.1437    8.3983    4.3267   64.7878 50.5888   54.4505   40.9129    7.6602   26.3725   53.6989];y = [33.2399    3.8216    6.9667   58.7902   13.4380   11.4167    8.4626    5.3666   62.3270  56.4278   64.1532   42.0079    6.4660   28.7050   53.8727];c_i = 0;m_i = 0;eata = 0.0002;c = [];m = [];rss = [];N = size(data_x,2);i=0;stop = 0;count = 0;ideal_c = c_i;ideal_m = m_i;while(stop==0)  count = count+1;  ind = randi(size(x,2));  
  der_c = find_derivative_of_rss_to_c_one_coordinate(y(ind),x(ind),m_i,c_i);  der_m = find_derivative_of_rss_to_m_one_coordinate(y(ind),x(ind),m_i,c_i);  
  if count>100 | (((abs(der_c)<0.1 | abs(der_m)<0.1) && count>10))    stop=1;    ideal_c = c_i;    ideal_m = m_i;  endif    c_i = c_i - (eata.*der_c);  m_i = m_i - (eata.*der_m);  c(end+1) = c_i;  m(end+1) = m_i;    i++; end%cacluate the cost for m and cZ = find_rss_for_m_c(y,m,x,c,N);%plotcontour(c,m,Z);%plot real data points and predicted straight linefigure();plot(x,y,'x');hold onpredicted = (x.*ideal_m) + ideal_c;plot(x,predicted,'-');%display optimal m and c valuesfprintf("Optimal m is : %d\nOptimal c is : %d\n",ideal_m,ideal_c);